{"version":3,"file":"index.js","sources":["../package.json","../src/index.ts"],"sourcesContent":["{\n  \"name\": \"@jspsych/plugin-call-function\",\n  \"version\": \"2.1.0\",\n  \"description\": \"jsPsych plugin for calling an arbitrary function during a jspsych experiment\",\n  \"type\": \"module\",\n  \"main\": \"dist/index.cjs\",\n  \"exports\": {\n    \"import\": \"./dist/index.js\",\n    \"require\": \"./dist/index.cjs\"\n  },\n  \"typings\": \"dist/index.d.ts\",\n  \"unpkg\": \"dist/index.browser.min.js\",\n  \"files\": [\n    \"src\",\n    \"dist\"\n  ],\n  \"source\": \"src/index.ts\",\n  \"scripts\": {\n    \"test\": \"jest\",\n    \"test:watch\": \"npm test -- --watch\",\n    \"tsc\": \"tsc\",\n    \"build\": \"rollup --config\",\n    \"build:watch\": \"npm run build -- --watch\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git+https://github.com/jspsych/jsPsych.git\",\n    \"directory\": \"packages/plugin-call-function\"\n  },\n  \"author\": \"Josh de Leeuw\",\n  \"license\": \"MIT\",\n  \"bugs\": {\n    \"url\": \"https://github.com/jspsych/jsPsych/issues\"\n  },\n  \"homepage\": \"https://www.jspsych.org/latest/plugins/call-function\",\n  \"peerDependencies\": {\n    \"jspsych\": \">=7.1.0\"\n  },\n  \"devDependencies\": {\n    \"@jspsych/config\": \"^3.2.0\",\n    \"@jspsych/test-utils\": \"^1.2.0\"\n  }\n}\n","import { JsPsych, JsPsychPlugin, ParameterType, TrialType } from \"jspsych\";\n\nimport { version } from \"../package.json\";\n\nconst info = <const>{\n  name: \"call-function\",\n  version: version,\n  parameters: {\n    /** The function to call. */\n    func: {\n      type: ParameterType.FUNCTION,\n      default: undefined,\n    },\n    /** Set to true if `func` is an asynchoronous function. If this is true, then the first argument passed to `func`\n     * will be a callback that you should call when the async operation is complete. You can pass data to the callback.\n     * See example below.\n     */\n    async: {\n      type: ParameterType.BOOL,\n      default: false,\n    },\n  },\n  data: {\n    /** The return value of the called function. */\n    value: {\n      type: ParameterType.COMPLEX,\n      default: undefined,\n    },\n  },\n  // prettier-ignore\n  citations: '__CITATIONS__',\n};\n\ntype Info = typeof info;\n\n/**\n * This plugin executes a specified function. This allows the experimenter to run arbitrary code at any point during the experiment.\n *\n * The function cannot take any arguments. If arguments are needed, then an anonymous function should be used to wrap the function call (see examples below).\n *\n * @author Josh de Leeuw\n * @see {@link https://www.jspsych.org/latest/plugins/call-function/ call-function plugin documentation on jspsych.org}\n */\nclass CallFunctionPlugin implements JsPsychPlugin<Info> {\n  static info = info;\n\n  constructor(private jsPsych: JsPsych) {}\n\n  trial(display_element: HTMLElement, trial: TrialType<Info>) {\n    //trial.post_trial_gap = 0;  // TO DO: TS error: number not assignable to type any[]. I don't think this param should be an array..?\n    let return_val;\n\n    const end_trial = () => {\n      const trial_data = {\n        value: return_val,\n      };\n\n      this.jsPsych.finishTrial(trial_data);\n    };\n\n    if (trial.async) {\n      const done = (data) => {\n        return_val = data;\n        end_trial();\n      };\n      trial.func(done);\n    } else {\n      return_val = trial.func();\n      end_trial();\n    }\n  }\n\n  // no explicit simulate() mode for this plugin because it would just do\n  // the same thing as the regular plugin\n}\n\nexport default CallFunctionPlugin;\n"],"names":[],"mappings":";;AAEE,IAAW,OAAA,GAAA,OAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;EC4BA,SAAA,EAAA;AAAA;;GAAe;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"}